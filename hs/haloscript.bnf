{
  generate=[names="long"]

  parserClass="org.intellij.grammar.parser.GrammarParser"
  parserUtilClass="org.intellij.grammar.parser.GrammarParserUtil"

  implements="org.intellij.grammar.psi.BnfComposite"
  extends="org.intellij.grammar.psi.impl.BnfCompositeImpl"

  psiClassPrefix="Bnf"
  psiImplClassSuffix="Impl"
  psiPackage="org.intellij.grammar.psi"
  psiImplPackage="org.intellij.grammar.psi.impl"
  psiImplUtilClass="org.intellij.grammar.psi.impl.GrammarPsiImplUtil"

  elementTypeHolderClass="org.intellij.grammar.psi.BnfTypes"
  elementTypePrefix="BNF_"
  elementTypeClass="org.intellij.grammar.psi.BnfCompositeElementType"
  tokenTypeClass="org.intellij.grammar.psi.BnfTokenType"

  tokens=[
    whitespace='regexp:\s+'
    line_comment='regexp:(;|//).*'
    string='regexp:"([^"]|\\")*"'
    string_unclosed='regexp:"([^"]|\\")*'
    number='regexp:\d+(\.\d*)?'
    bool='regexp:true|false|0|1'

    OP_EQ = '='
    NOT_EQ = 'regexp:(!=)'
    NOT = 'regexp:(NOT)'
    PLUS = 'regexp:(+)'


    paren1='('
    paren2=')'
    bracket1='['
    bracket2=']'

    string="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"
    syntax_quote='`'
    syntax='regexp:;|\.|\+|-|\*\*|\*|==|=|/|,|\(|\)|\^|\!=|\!|>=|<=|>|<'
    TYPE_ = 'type'
  ]

  extends("symbol|literal")=s_form
  name("reader_.*")=script_form
}

root ::= root_entry * // for LivePreview
private root_entry ::= not_eof script_form {pin=1 recoverWhile=root_entry_recover}
private external root_entry_recover ::= rootFormRecover
private not_eof ::= !<<eof>>

// Variables are: ( <global> <type> <name> <optional_value|expr_list> )
// Scripts are: ( "script" <script_type> <expr_list> )
// script_types are: startup|dormant|continuous|(static <ret_type>) <expr_list>
// The return type of a script is the return type of last value evaluated by the expression list.


statement ::= someRule ')'
someRule ::= '(' someRule ')'
someRule2 ::= token?

otherRule::= ( token )
private privateRule::= token
private privateString ::= 'token'
private tokenRule ::= '=' "=" '==' "=="
empty ::= ()
empty2 ::= {}
empty3 ::= []
private empty4 ::= ()
private empty5 ::= []
private empty6 ::= &()
private empty7 ::= !()
private empty8 ::= [({})]
private not_empty1 ::= [({token})]
left empty9 ::= []
inner left empty10 ::= []
